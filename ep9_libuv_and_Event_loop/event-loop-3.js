const fs = require("fs");

// ðŸ”¹ Scheduled in the CHECK phase
setImmediate(() => {
  console.log("A. setImmediate callback");
});

// ðŸ”¹ Scheduled in the TIMERS phase
setTimeout(() => {
  console.log("B. setTimeout callback");
}, 0);

// ðŸ”¹ Scheduled in the MICROTASK queue
Promise.resolve().then(() => {
  console.log("C. Promise callback");
});

// ðŸ”¹ Scheduled in the POLL phase (I/O operation)
fs.readFile("./file.txt", "utf8", () => {
  // ðŸ”¹ NEXT TICK â€” runs immediately after current operation (before any microtasks)
  process.nextTick(() => {
    console.log("D1. process.nextTick inside readFile callback");
  });

  // ðŸ”¹ PROMISE â€” microtask, runs after nextTick
  Promise.resolve().then(() => {
    console.log("D2. Promise inside readFile callback");
  });

  // ðŸ”¹ TIMERS â€” macrotask, runs in next timer phase
  setTimeout(() => {
    console.log("D3. setTimeout inside readFile callback");
  }, 0);

  // ðŸ”¹ CHECK phase â€” macrotask, runs after poll if poll completes
  setImmediate(() => {
    console.log("D4. setImmediate inside readFile callback");
  });
  // ðŸ”¹ Runs immediately (synchronous part of callback)
  console.log("D5. readFile callback");
});

// ðŸ”¹ NEXT TICK â€” highest async priority
process.nextTick(() => {
  console.log("E. process.nextTick callback");
});

// ðŸ”¹ Sync log
console.log("F. End of script");
